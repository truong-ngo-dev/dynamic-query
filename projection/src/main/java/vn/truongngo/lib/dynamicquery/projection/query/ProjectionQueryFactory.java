package vn.truongngo.lib.dynamicquery.projection.query;

import lombok.RequiredArgsConstructor;
import vn.truongngo.lib.dynamicquery.core.builder.QueryBuilderStrategy;
import vn.truongngo.lib.dynamicquery.core.builder.QueryMetadata;
import vn.truongngo.lib.dynamicquery.projection.descriptor.PredicateDescriptor;
import vn.truongngo.lib.dynamicquery.projection.descriptor.ProjectionDescriptor;
import vn.truongngo.lib.dynamicquery.projection.parser.DescriptorParser;
import vn.truongngo.lib.dynamicquery.projection.processor.ProjectionDescriptorProvider;

/**
 * Factory class responsible for creating query objects based on projection and criteria classes.
 * <p>
 * This factory uses a {@link QueryBuilderStrategy} to build a query instance from the metadata
 * generated by parsing projection and predicate descriptors.
 * </p>
 *
 * @param <Q> the type of the query object produced by this factory
 * @author Truong Ngo
 * @version 2.0.0
 */
@RequiredArgsConstructor
public class ProjectionQueryFactory<Q> {

    private final QueryBuilderStrategy<Q> strategy;

    /**
     * Creates a query instance of type {@code Q} using the specified projection class, criteria object,
     * and an optional query customizer.
     *
     * @param <P> the projection class type
     * @param <C> the criteria class type
     * @param projectionClass the class representing the projection to select
     * @param criteria the criteria object used to generate where predicates
     * @param customizer an optional customizer to further modify the query metadata before building the query; can be null
     * @return the query instance built by the underlying {@link QueryBuilderStrategy}
     */
    public <P, C> Q createQuery(Class<P> projectionClass, C criteria, QueryCustomizer customizer) {
        ProjectionDescriptorProvider provider = ProjectionDescriptorProvider.getInstance();
        ProjectionDescriptor projectionDescriptor = provider.getProjectionDescriptor(projectionClass);
        PredicateDescriptor predicateDescriptor = provider.getPredicateDescriptor(criteria.getClass(), projectionClass);
        QueryMetadata queryMetadata = buildQueryMetadata(projectionDescriptor, predicateDescriptor, criteria, customizer);
        return strategy.accept(queryMetadata);
    }

    /**
     * Creates a query instance of type {@code Q} using the specified projection class and criteria object.
     * This method delegates to {@link #createQuery(Class, Object, QueryCustomizer)} with a null customizer.
     *
     * @param <P> the projection class type
     * @param <C> the criteria class type
     * @param projectionClass the class representing the projection to select
     * @param criteria the criteria object used to generate where predicates
     * @return the query instance built by the underlying {@link QueryBuilderStrategy}
     */
    public <P, C> Q createQuery(Class<P> projectionClass, C criteria) {
        return createQuery(projectionClass, criteria, null);
    }

    /**
     * Builds the {@link QueryMetadata} by parsing the projection and predicate descriptors,
     * applying criteria, and optionally customizing the metadata.
     *
     * @param <C> the criteria class type
     * @param projectionDescriptor the descriptor of the projection (selected columns, joins, etc.)
     * @param predicateDescriptor the descriptor of the predicates (filters) based on criteria
     * @param criteria the criteria object providing values for filtering
     * @param customizer an optional customizer to modify the metadata before query creation; can be null
     * @return the fully constructed {@link QueryMetadata} ready for query building
     */
    private static <C> QueryMetadata buildQueryMetadata(
            ProjectionDescriptor projectionDescriptor,
            PredicateDescriptor predicateDescriptor,
            C criteria,
            QueryCustomizer customizer) {
        QueryMetadata queryMetadata = DescriptorParser.parseProjectionDescriptor(projectionDescriptor);
        DescriptorParser.setCriteriaDescriptor(queryMetadata, predicateDescriptor, criteria);

        if (customizer != null) {
            customizer.customize(queryMetadata);
        }

        return queryMetadata;
    }
}
